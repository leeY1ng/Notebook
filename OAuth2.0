第三方网站如何获得google facebook twitter的授权？

（1） Third-party application：第三方应用程序，本文中又称"客户端"（client），即上一节例子中的"云冲印"。

（2）HTTP service：HTTP服务提供商，本文中简称"服务提供商"，即上一节例子中的Google。

（3）Resource Owner：资源所有者，本文中又称"用户"（user）。

（4）User Agent：用户代理，本文中就是指浏览器。

（5）Authorization server：
认证服务器，即服务提供商专门用来处理认证的服务器。

（6）Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。

3、oauth思路

oauth在客户端和服务提供商之间设置了一个授权层
客户端不能直接登陆服务提供商 只能登陆授权

将用户与客户端区分开

客户登陆授权层所用的令牌token 与用户的密码不同
用户可以在登陆的时候 指定授权层令牌的权限范围和有效期

客户端登陆授权曾以后，服务提供商 根据令牌的权限范围和有效期 向客户端开放用户存储的资料


4、运行流程

A、用户打开客户端以后 客户端要求用户给予授权 

B、用户同意客户端授权

C、客户端使用上一步获得的授权 向认证服务器申请令牌

D、认证服务器对客户端进行认证以后 确认无误 同意发放令牌

E、客户端使用令牌 向资源服务器申请获取资源

F、资源服务器确认令牌无误 同意向客户端开放资源


客户端的授权模式

四种授权方式：

授权码模式
简化模式
密码模式
客户端模式


授权码模式
通过客户端的后台服务器 与服务提供商的认证服务器进行互动

A、用户访问客户端，后者将前者导向认证服务器
B、用户选择是否给予客户端授权
C、假设用户给予授权 										认证服务器将用户导向事先指定的重定向uri 同时附上授权码
D、客户端收到授权码 附上早先的 重定向uri 					向认证服务器申请令牌 这一步在服务器上完成 用户不可见
E、认证服务器核对了授权码和重定向uri 确认无误后， 
	向客户端发送访问令牌access token和更新令牌refresh token

所需参数：
response_type 授权类型 固定值 code
client_id 客户端ID 必选项
redirect_id 必选项
scope 申请的权限范围
state 客户端当前的状态 可以指定任意值 							认证服务器会原封不动返回这个值

C中 服务器回应客户端的URI 包含以下参数：

code 授权码 必选；该码有效期很短 一般为10分钟
		客户端只用使用该码一次，否则会被授权服务器拒绝 
		该码与客户端id和重定向id是一一对应的关系

state 如果客户端请求中包含这个参数 								认证服务器的回应也必须一模一样包含这个参数

例：

HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz


D中 客户端向认证服务器申请令牌的http请求 包含以下参数

grant_type 使用的授权模式 必选项 固定值"authorization_code"
code 上一步获得的授权码
redirect_uri 重定向uri 且必与A中的该参数值保持一致
client_id  客户端id

E中 认证服务器发送http回复 包含以下参数

access_token 访问令牌
token_type 令牌类型 大小写不敏感 bearer类型或mac类型
expire_in 过期时间 单位秒 
	如果省略该参数 必须其他方式设置过期时间
refresh_token 更新令牌 用来获取下一次的访问令牌
scope 权限范围 如果与客户端申请的范围一直 可省略

例子：
HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache //明确指定不得缓存

     {
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"example",
       "expires_in":3600,
       "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
       "example_parameter":"example_value"
     }



简化模式
不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了授权码这个步骤
所有步骤在浏览器中完成 令牌对访问者是可见的 且客户端不需要认证

A、客户端将用户导向认证服务器
B、用户决定是否给予授权
C、假设用户给予授权 认证服务器将用户导向客户端指定的 		重定向uri 并在uri的hash部分包含了访问令牌
D、浏览器向资源服务器发出请求，其中不包括上一步收到的hash值
E、资源服务器返回一个网页，其中包含的代码可以获取hash值中的		令牌
F、浏览器执行上一步获得的脚本 提取出令牌
G、浏览器将令牌发送给客户端

A中 客户端发出的http请求 包含以下参数
response_type授权类型 固定值 token
client_id 客户端id
redirect_id 重定向uri
scope 权限范围
state 客户端的当前状态 可以指定任意值 认证服务器会原封不动的返回这个值

例子：
    GET /authorize?response_type=token&
    			client_id=s6BhdRkqt3&
    			state=xyz&
    			redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb 
   	HTTP/1.1
    Host: server.example.com

C中  认证服务器回应客户端的uri 包含以下参数

access_token 访问令牌
token_type 令牌类型 大小写不敏感
expires_in 过期时间 单位秒 省略该参数 必须其他方式设置过期时间
scope 权限范围 如果与客户端申请的范围一致 可以省略
state 如果客户端的请求中包含这个参数 认证服务器的回应也必须一模一样包含这个参数

例：

     HTTP/1.1 302 Found
     Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA
               &state=xyz&token_type=example&
               expires_in=3600



上面例子中 认证服务器用http头信息location栏，指定浏览器重定向的网址 
	这个网址的hash部分包含了令牌
按照D 下一步浏览器会方位location指定的网址 但hash部分不会发送
接下来E 服务提供商的资源服务器发送的代码会提取出hash中的令牌


密码模式：
用户向客户端提供自己的用户名和密码 客户端使用这些信息
向服务商提供商索要授权
这种模式中 用户必须把自己的密码给客户端 客户端不得存储密码
用户对客户端高度信任

A、用户向客户端提供用户名和密码
B、客户端将用户名和密码发给认证服务器 向后者请求令牌
C、认证服务器确认无误后，向客户端提供访问令牌

B中 客户端发出的http请求 包含以下参数
grant_type 授权类型 固定值 password 
username 用户名
password 用户密码
scope 权限范围 可选

例：

     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded

     grant_type=password&
     username=johndoe&
     password=A3ddj3

C中 认证服务器向客户端发送访问令牌 

例：
     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"example",
       "expires_in":3600,
       "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
       "example_parameter":"example_value"
     }
整个过程 客户端不能保存用户的密码


客户端模式：
客户端以自己的名义，而不是以用户的名义向服务提供商进行认证

严格来说 客户端模式并不属于oauth框架索要解决的问题
在这种模式中，用户直接向客户端注册，客户端以自己的名义要求 服务提供商提供服务，不存在授权问题

A、客户端向认证服务器进行身份认证 并要求一个访问令牌
B、认证服务器确认无误后，向客户端提供访问令牌

A中 客户端发出的http请求 包含以下参数 
granttype 授权类型 固定值 clientcredentials
scope 授权范围 可选

例：

     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded

     grant_type=client_credentials

认证服务器必须以某种方式，验证客户端身份
B中，认证服务器向客户端发送访问令牌

 HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "access_token":"2YotnFZFEjr1zCsicMWpAA",
       "token_type":"example",
       "expires_in":3600,
       "example_parameter":"example_value"
     }



更新令牌：
如果用户访问的时候 客户端的访问令牌已经过期，则需要使用更新令牌申请一个新的访问令牌

客户端发出http请求 包含以下参数：
granttype 授权模式 固定值 refreshtoken 必选
refresh_token  表示早前收到的更新令牌 必选
scope 表示申请的授权范围 不可以超出上一次申请的范围 如果省略该参数 表示与上一次一致

例:
     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded

     grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA


