Part2 http结构

5、web服务器

对多种不同类型软硬件的web服务器进行调查
如何使用perl编写简单的诊断性web服务器
一步一步解释web服务器是如何处理http事务的


5·1
web服务器会对http请求进行处理并提供响应

web服务器实现了http和相关的tcp连接处理 负责关闭web服务器提供的资源以及对web服务器的配置 控制以及扩展方面的管理

web服务器实现了http协议 管理着web资源
并负责提供web服务器的管理功能
web服务器逻辑和操作系统共同负责管理tcp连接

底层操作系统负责管理底层计算机系统的硬件细节 
并提供了tcp/ip网络支持
负责装载web资源的文件系统以及控制当前计算活动的进程管理功能



web服务器有各种不同的形式


可以在标准的计算机系统上安装并运行通用的软件web服务器
如果不想麻烦安装软件 购买一台已经配置好web服务器的设备
微处理器的出现 少量计算机芯片上嵌入web服务器

实现方式：
通用软件web服务器

web服务器设备 
是预先打包好的软硬件解决方案
厂商在计算机平台上预装好软件服务器并将软件配置好

嵌入式web服务器
嵌入到消费类产品上小型web服务器 


perl web服务器
诊断工具

5·3 实际的客户端会做些什么

1、建立连接 
接受一个客户端连接 或者不希望与这个客户端连接 将其关闭

2、接收请求
从网络中读取http请求报文

3、处理请求
对请求报文进行解释 并采取行动

4、访问资源
访问报文中指定的资源

5、构建响应
创建带有正确首部的http响应报文

6、发送响应
将响应送给客户端

7、记录事务处理过程
将与已完成事务有关的内容纪录在一个日志文件中


5·4 接受客户端连接

如果客户端已经打开了一条到服务器的持久连接
就可以用那条连接来发送请求
否则客户端要打开一条新的到服务器的连接

客户端请求一条到web服务器的tcp连接时
web服务器会建立连接 
判断连接的另一端是哪个客户端 从tcp连接中价格ip地址解析出来
（不同操作系统在对tcp连接进行操作时会使用不同的接口和数据结构
unix下tcp连接由一个套接字表示 可以用getpeername调用从套接字中获取客户端的ip地址）

一旦新连接建立并被接受 服务器就会将新连接添加到其现存web服务器连接列表中
做好监视连接上数据传输的准备

web服务器可以随意拒绝或立即关闭任意一条连接
有些web服务器会因为客户端ip地址或主机名未认证
或 因为它是已知的恶意客户端而关闭连接
web服务器也可以使用其他识别技术


客户端主机名识别

可以用反向dns对大部分web服务器进行配置
以便将客户端ip地址转换成客户端主机名

（反向dns：域名反向解析即从ip地址到域名的映射）
web服务器可以将客户端主机名用于详细的访问控制和日志记录
但要注意 主机名查找会花费很长时间
这样会降低web服务器的处理速度

很多大容量web服务器要不禁止主机名解析
要不只允许对特定内容解析


通ident确定客户端用户

有些web服务器支持IETF的ident协议
服务器可以通过ident协议找到发起的http连接的用户名
这些信息对web服务器的日志记录特别有用
流行的通用日志格式的第二个字段就包含了每条http请求的ident用户名

（这个通用日志格式ident字段被称为rfc931 
这个是根据定义identixeyi的过时rfc版本的ident规范记录在rfc1413中）

如果客户端支持ident协议就在tcp端口113上监听ident请求

客户端打开http连接 服务器打开自己到客户端ident服务器端口的连接
发送一条简单的请求 询问与新连接相对应的用户名 并从客户端解析出包含用户名的响应

ident在组织内部可以很好的工作 但公共网上并不能很好：
很多客户端pc没有允许ident识别协议守护进程软件
ident协议会使http事务处理产生严重的时延
很多防火墙不允许ident流量进入
ident协议不安全 容易被伪造
ident协议不支持虚拟ip地址
暴露客户端的用户名还涉及隐私问题


5·5 接收请求报文

连接上有数据到达时，web服务器会从网络连接中读取数据 并将请求报文中的内容解析出来

解析请求报文时 web服务器会：

解析请求行 查找请求方法 指定的资源标识符以及版本号 
各项之间由空格分隔 并以回车符序列作为行的结束

读取以回车符结尾的报文首部

检测到以回车符结尾的 标识首部结束的空行（如果有的话）

如果有 长度由content-length首部指定 读取请求主体


解析请求报文时，web服务器会不定期从网络上接收输入数据
网络连接可能随时出现延迟，
web服务器需要从网络中读取数据，将部分报文数据临时存储在内存中
直到收到足以进行解析的数据并理解其意义为止



报文的内部表示法

有些web服务器还会用便于进行报文操作的内部数据结构来存储请求报文
比如
数据结构中可能包含有指向请求报文中各个片段的指针及其长度
这样可以将这些首部存放在一个快速查询表中 以便快速访问特定首部的具体值


连接的输入/输出处理结构

高性能的web服务器能够同时支持数千条连接
这些连接使得服务器可以与世界各地客户端进行通信
每个客户端都向服务器打开了一条或多条连接
某些连接可能在快速的向web服务器发送请求
而其他一些连接则可能在慢慢发送
或者不经常发送请求，还有一些可能是空闲的
安静的等待着将来可能出现的动作 


因为请求可能随时会达到
所以web服务器会不停的观察有无新的web请求
不同的web服务器结构会以不同的方式为请求服务：


单线程web服务器

一次只处理一个请求，直到其完成为止
一个事务处理结束之后 才去处理下一条连接
结构易于实现 但在处理过程中 所有其他连接都被忽略
这样会造成严重的性能问题 只适用于低负荷服务器
以及type-o-server这样的诊断工具


多进程及多线程web服务器

用于多个进程 或更高效的线程同时对请求进行处理

（进程是 独立的程序控制流  有自己的变量集
线程是一种更快更高效的进程版本
单个程序可以通过进程和线程同时处理多件事情）

可以根据需要创建或预先创建一些线程/进程
（预先创建一些线程系统被称为工作池系统 池中一组线程等待工作）
有些服务器会为每条连接都分配一个线程/进程
但当服务器要同时处理成百上千甚至数万的连接时，
需要的进程或线程数量太多会消耗内存或系统资源
因此
很多多线程web服务器会对线程/进程的最大数量进行限制


复用I/O的服务器

为了支持大量的连接 很多web服务器采用了复用结构 
在复用结构中 要同时监听所有连接上的活动
当连接的状态发生改变时，（比如数据可用 或出现错误）
就对那条连接进行少量的处理
处理结束之后 将连接返回到开放连接列表中 等待下一次状态变化
只有在事情可做时才会连接进行处理
在空闲连接上等待的时候不会绑定线程和进程


复用的多线程web服务器

有些系统会将多线程和复用功能结合在一起
以利用计算机平台上的多个cpu
多个线程（通常是一个物理处理器）
中的每一个都在观察打开的连接
（或打开的连接中的一个子集）
并对每条连接执行少量任务


5·6 处理请求





















